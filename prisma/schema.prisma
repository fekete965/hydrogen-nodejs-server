// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String          @id @default(uuid())
  firstName               String
  lastName                String?
  email                   String          @unique
  password                String
  gender                  UserGender      @default(MALE)
  coverImage              String?
  profileImage            String?
  role                    UserRole        @default(USER)
  status                  UserStatus      @default(ACTIVE)
  lastSeen                DateTime        @default(now())
  isEmailVerified         Boolean         @default(false)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  friendsOf               User[]          @relation("_UsersFriends")
  myFriends               User[]          @relation("_UsersFriends")
  friendsRequestsSent     User[]          @relation("_FriendsRequests")
  friendsRequestsReceived User[]          @relation("_FriendsRequests")
  taggedInPosts           Post[]          @relation("_UsersPostsTag")
  specificAudienceInPosts Post[]          @relation("_UsersPostsSpecificAudience")
  posts                   Post[]
  likePosts               Post[]          @relation("_UsersPostsLike")
  membersInGroups         Group[]         @relation("_GroupMembers")
  groupsCreated           Group[]
  groupPosts              GroupPost[]     @relation("_GroupPostsCreated")
  groupPostLikes          GroupPost[]     @relation("_UsersGroupPostsLikes")
  invitedInGroups         Group[]         @relation("_UsersGroupsInvite")
  fromNotifications       Notifications[] @relation("fromNotifications")
  toNotifications         Notifications[] @relation("toNotifications")
  socketId                String?
  messagesSent            Message[]       @relation("_MessagesSent")
  messagesReceived        Message[]       @relation("_MessagesReceived")
  loginHistory            LoginHistory[]  @relation("UserLoginHistory")
  postComments            Comment[]
}

model LoginHistory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  browser   Json?
  os        Json?
  location  Json?
  lastSeen  DateTime @default(now())
  isActive  Boolean  @default(true)
  isCurrent Boolean  @default(true)
  user      User     @relation("UserLoginHistory", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String   @unique
}

model Post {
  id                      String           @id @default(uuid())
  content                 String?
  audience                PostAudienceEnum @default(PUBLIC)
  author                  User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId                String
  image                   String?
  feeling                 String?
  checkIn                 String?
  taggedFriends           User[]           @relation("_UsersPostsTag")
  specificAudienceFriends User[]           @relation("_UsersPostsSpecificAudience")
  likes                   User[]           @relation("_UsersPostsLike")
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  comments                Comment[]
}

model Group {
  id            String       @id @default(uuid())
  name          String
  privacy       GroupPrivacy @default(PUBLIC)
  members       User[]       @relation("_GroupMembers")
  admin         User         @relation(references: [id], fields: [adminId], onDelete: Cascade)
  adminId       String
  coverImage    String?
  profileImage  String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  posts         GroupPost[]
  invitedPeople User[]       @relation("_UsersGroupsInvite")
}

model GroupPost {
  id          String   @id @default(uuid())
  content     String?
  author      User     @relation(name: "_GroupPostsCreated", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  image       String?
  likes       User[]   @relation("_UsersGroupPostsLikes")
  isPublished Boolean  @default(false)
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notifications {
  id         String           @id @default(uuid())
  type       NotificationType
  content    String
  createdAt  DateTime         @default(now())
  fromUser   User?            @relation(name: "fromNotifications", fields: [fromUserId], references: [id], onDelete: Cascade)
  fromUserId String?
  toUser     User?            @relation(name: "toNotifications", fields: [toUserId], references: [id], onDelete: Cascade)
  toUserId   String?
}

model Message {
  id         String        @id @default(uuid())
  content    String
  createdAt  DateTime      @default(now())
  sender     User?         @relation(name: "_MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String?
  receiver   User?         @relation(name: "_MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?
  status     MessageStatus @default(SENT)
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  content   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

enum PostAudienceEnum {
  PUBLIC
  FRIENDS
  ONLY_ME
  SPECIFIC
}

enum UserRole {
  ADMIN
  USER
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum UserStatus {
  ACTIVE
  IDLE
  LOGOUT
}

enum GroupPrivacy {
  PUBLIC
  PRIVATE
}

enum NotificationType {
  POST
  FRIEND
  GROUP
}

enum MessageStatus {
  SENT
  RECEIVED
  SEEN
}
